import"./modulepreload-polyfill-B5Qt9EMX.js";import{p as I,r as $}from"./topBar-Ccw8a5qR.js";const l="https://www.relda.com.br",M=JSON.parse(localStorage.getItem("userData"));document.addEventListener("DOMContentLoaded",()=>{I("pagamentos"),$("movimentacoes",M.permissions_list),H(),m()});let y=null,c=new Date;const L=document.getElementById("prev-month-btn"),k=document.getElementById("next-month-btn"),C=document.getElementById("current-month-display");function _(){const t=c.toLocaleString("pt-BR",{month:"long"}),a=c.getFullYear();C.textContent=`${t.charAt(0).toUpperCase()+t.slice(1)} / ${a}`}L.addEventListener("click",()=>{c.setMonth(c.getMonth()-1),m()});k.addEventListener("click",()=>{c.setMonth(c.getMonth()+1),m()});function D(t){const n=document.querySelector(`button[onclick="markAsPaid(${t})"]`).closest("tr").cells[3].textContent.replace("R$","").replace(/\./g,"").replace(",",".").trim();T(t,n)}async function T(t,a){const e=document.getElementById("mark-as-paid-modal"),n=document.getElementById("payment-account");try{const d=await(await fetch(`${l}/api/finance/bank-accounts/?is_active=true`,{credentials:"include"})).json();n.innerHTML='<option value="">Selecione a conta de origem</option>',d.forEach(s=>{n.innerHTML+=`<option value="${s.id}">${s.name} (${u(s.initial_balance)})</option>`})}catch(o){console.error(o)}document.getElementById("payable-id-input").value=t,document.getElementById("payment-amount").value=parseFloat(a).toFixed(2),document.getElementById("payment-date").valueAsDate=new Date,e.classList.remove("hidden")}async function S(t){t.preventDefault();const a=document.getElementById("payable-id-input").value,e={bank_account_id:document.getElementById("payment-account").value,amount:document.getElementById("payment-amount").value,payment_date:document.getElementById("payment-date").value};if(!e.bank_account_id){alert("Por favor, selecione a conta de origem do pagamento.");return}try{const n=await fetch(`${l}/api/finance/payables/${a}/mark_as_paid/`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(e)}),o=await n.json();if(!n.ok)throw new Error(o.error||"Erro ao processar pagamento.");r(o.success),document.getElementById("mark-as-paid-modal").classList.add("hidden"),m()}catch(n){r(n.message,"error")}}function P(){document.getElementById("add-bill-button").addEventListener("click",N),document.getElementById("cancel-modal").addEventListener("click",E),document.getElementById("bill-form").addEventListener("submit",R),document.getElementById("confirm-delete-btn").addEventListener("click",U),document.getElementById("cancel-delete-btn").addEventListener("click",b),document.getElementById("add-card-expense-btn").addEventListener("click",x);const t=document.getElementById("mark-as-paid-modal");document.getElementById("mark-as-paid-form").addEventListener("submit",S),document.getElementById("cancel-payment-btn").addEventListener("click",()=>t.classList.add("hidden"))}async function F(){try{const a=await(await fetch("/modalGastoCartao.html")).text();document.getElementById("card-expense-modal-container").innerHTML=a,document.getElementById("add-card-expense-btn").addEventListener("click",x),document.getElementById("cancelCardExpenseBtn").addEventListener("click",w),document.getElementById("cardExpenseForm").addEventListener("submit",Y)}catch(t){console.error("Falha ao carregar componentes:",t)}}function H(){P(),F()}const u=t=>parseFloat(t).toLocaleString("pt-BR",{style:"currency",currency:"BRL"}),f=t=>{const[a,e,n]=t.split("-");return`${n}/${e}/${a}`};function r(t,a="success"){const e=document.getElementById("toast-notification"),n=document.getElementById("toast-message");if(!e||!n){console.error("Elementos do Toast não encontrados no DOM.");return}n.textContent=t;const o=a==="success"?"bg-green-500":"bg-red-500";e.className=`fixed bottom-4 right-4 text-white px-4 py-2 rounded-lg shadow-lg toast ${o}`,setTimeout(()=>{e.className="hidden"},3e3)}function O(t){const a=document.getElementById("payables-table-body");if(a.innerHTML="",t.length===0){a.innerHTML='<tr><td colspan="6" class="text-center py-4 text-gray-500">Nenhuma conta para este mês.</td></tr>';return}t.forEach(e=>{const n=document.createElement("tr");let o="",d="";switch(e.status){case"pago":o="bg-green-100 text-green-800",d="Pago",n.classList.add("bg-green-50");break;case"vencido":o="bg-red-100 text-red-800",d="Vencido",n.classList.add("bg-red-50");break;default:o="bg-yellow-100 text-yellow-800",d="Pendente";break}if(e.type==="card"){const s=new Date(c.getFullYear(),c.getMonth(),e.due_day);n.innerHTML=`
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            <i class="fas fa-credit-card text-indigo-500 mr-2"></i>
                            Fatura ${e.card_name}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">Fatura de Cartão</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-semibold">${f(s.toISOString().split("T")[0])}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-semibold text-indigo-600">${u(e.total_amount)}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                             <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${o}">${d}</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <button onclick="viewCardStatement(${e.card_id})" class="text-indigo-600 hover:text-indigo-900 transition-colors" title="Ver Detalhes da Fatura">
                                <i class="fas fa-eye"></i> Ver Detalhes
                            </button>
                        </td>
                    `}else n.innerHTML=`
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${e.description}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${e.category_name||"N/A"}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm ${e.status==="vencido"?"text-red-600 font-bold":"text-gray-500"}">${f(e.due_date)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-semibold">${u(e.amount)}</td>
                        <td class="px-6 py-4 whitespace-nowrap"><span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${o}">${d}</span></td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            ${e.status!=="pago"?`<button onclick="markAsPaid(${e.id})" class="text-green-600 hover:text-green-800 mr-3" title="Marcar como Pago"><i class="fas fa-check-circle"></i></button>`:""}
                            <button onclick="openEditModal(${e.id})" class="text-blue-600 hover:text-blue-800 mr-3" title="Editar"><i class="fas fa-edit"></i></button>
                            <button onclick="openDeleteModal(${e.id})" class="text-red-500 hover:text-red-700" title="Excluir"><i class="fas fa-trash-alt"></i></button>
                        </td>
                    `;a.appendChild(n)})}function j(t){const a=c.getFullYear(),e=c.getMonth()+1;window.location.href=`/src/pages/banking/detalheFatura/detalheFatura.html?card_id=${t}&month=${e}&year=${a}`}async function m(){_();const t=c.getFullYear(),a=c.getMonth()+1,e=`${l}/api/finance/monthly-bills/?month=${a}&year=${t}`;try{const n=await fetch(e,{credentials:"include"});if(n.status===401){window.location.href="login.html";return}if(!n.ok)throw new Error("Falha ao buscar as contas do mês.");const o=await n.json(),d=o.manual_bills.map(i=>({...i,type:"manual"})),s=o.card_bills.map(i=>({...i,type:"card"}));let p=[...d,...s];p.sort((i,g)=>{const v=i.type==="card"?new Date(t,a-1,i.due_day):new Date(i.due_date),B=g.type==="card"?new Date(t,a-1,g.due_day):new Date(g.due_date);return v-B}),O(p),A(p)}catch(n){r(n.message,"error")}}function A(t){let a=0,e=0,n=0;new Date().setHours(0,0,0,0),t.forEach(d=>{const s=parseFloat(d.amount||d.total_amount);d.status==="pago"?e+=s:(a+=s,d.status==="vencido"&&(n+=s))}),document.getElementById("summary-total-open").textContent=u(a),document.getElementById("summary-total-paid").textContent=u(e),document.getElementById("summary-total-overdue").textContent=u(n)}async function h(){const t=document.getElementById("bill-category");try{const a=await fetch(`${l}/api/finance/categories/?type=saida`);if(!a.ok)throw new Error("Falha ao carregar categorias.");const e=await a.json();t.innerHTML='<option value="">Selecione uma Categoria</option>',e.forEach(n=>{t.innerHTML+=`<option value="${n.id}">${n.name}</option>`})}catch(a){t.innerHTML='<option value="">Erro ao carregar</option>',r(a.message,"error")}}async function N(){document.getElementById("bill-form").reset(),document.getElementById("modal-title").textContent="Nova Conta a Pagar",document.getElementById("bill-id").value="",await h(),document.getElementById("bill-modal").classList.remove("hidden")}function E(){document.getElementById("bill-modal").classList.add("hidden")}async function R(t){t.preventDefault();const a=document.getElementById("bill-id").value,e={description:document.getElementById("bill-description").value,amount:document.getElementById("bill-amount").value,due_date:document.getElementById("bill-due-date").value,category:document.getElementById("bill-category").value||null,status:document.getElementById("bill-status").value||"pendente"};if(!e.description||!e.amount||!e.due_date){r("Descrição, Valor e Data de Vencimento são obrigatórios.","error");return}const n=a?`${l}/api/finance/payables/${a}/`:`${l}/api/finance/payables/`,o=a?"PUT":"POST",d=document.getElementById("save-bill");d.disabled=!0,d.textContent="Salvando...";try{const s=await fetch(n,{method:o,headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(e)});if(!s.ok){const p=await s.json();throw new Error(`Erro ao salvar: ${JSON.stringify(p)}`)}r(a?"Conta atualizada com sucesso!":"Conta criada com sucesso!"),E(),m()}catch(s){r(s.message,"error")}finally{d.disabled=!1,d.textContent="Salvar"}}async function V(t){document.getElementById("bill-id").value=t,await h();try{const a=await fetch(`${l}/api/finance/payables/${t}/`,{credentials:"include"});if(a.status===401){window.location.href="login.html";return}if(!a.ok)throw new Error("Falha ao buscar dados da conta.");const e=await a.json();document.getElementById("modal-title").textContent="Editar Conta a Pagar",document.getElementById("bill-description").value=e.description,document.getElementById("bill-amount").value=e.amount,document.getElementById("bill-due-date").value=e.due_date,document.getElementById("bill-category").value=e.category||"",document.getElementById("bill-status").value=e.status,document.getElementById("bill-modal").classList.remove("hidden")}catch(a){r(a.message,"error")}}function J(t){y=t,document.getElementById("delete-modal").classList.remove("hidden")}function b(){y=null,document.getElementById("delete-modal").classList.add("hidden")}async function U(){if(y)try{if((await fetch(`${l}/api/finance/payables/${y}/`,{method:"DELETE",credentials:"include"})).status!==204)throw new Error("Erro ao excluir a conta.");r("Conta excluída com sucesso!"),b(),m()}catch(t){r(t.message,"error")}}async function x(){const t=document.getElementById("card-expense-card"),a=document.getElementById("card-expense-category");try{const[e,n]=await Promise.all([fetch(`${l}/api/finance/credit-cards/?is_active=true`,{credentials:"include"}),fetch(`${l}/api/finance/categories/?type=saida`,{credentials:"include"})]),o=await e.json(),d=await n.json();t.innerHTML='<option value="">Selecione um cartão</option>',o.forEach(s=>{t.innerHTML+=`<option value="${s.id}">${s.name} (final ${s.last_digits})</option>`}),a.innerHTML='<option value="">Selecione uma categoria</option>',d.forEach(s=>{a.innerHTML+=`<option value="${s.id}">${s.name}</option>`}),document.getElementById("cardExpenseModal").classList.remove("hidden")}catch(e){console.error(e),r("Erro ao carregar dados para o formulário.","error")}}function w(){document.getElementById("cardExpenseModal").classList.add("hidden")}async function Y(t){t.preventDefault();const a=document.getElementById("saveCardExpenseBtn"),e={description:document.getElementById("card-expense-description").value,amount:document.getElementById("card-expense-amount").value,installments:document.getElementById("card-expense-installments").value,credit_card_id:document.getElementById("card-expense-card").value,category_id:document.getElementById("card-expense-category").value,transaction_date:document.getElementById("card-expense-date").value};if(!e.description||!e.amount||!e.credit_card_id||!e.category_id||!e.transaction_date){r("Por favor, preencha todos os campos obrigatórios.","error");return}a.disabled=!0,a.textContent="Criando...";try{const n=await fetch(`${l}/api/finance/card-expense/`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(e)}),o=await n.json();if(!n.ok)throw new Error(o.error||"Ocorreu um erro ao registrar a despesa.");r(o.success||"Despesa registrada com sucesso!"),document.getElementById("cardExpenseForm").reset(),w(),m()}catch(n){r(n.message,"error")}finally{a.disabled=!1,a.textContent="Criar Parcelas"}}window.markAsPaid=D;window.openEditModal=V;window.openDeleteModal=J;window.viewCardStatement=j;
